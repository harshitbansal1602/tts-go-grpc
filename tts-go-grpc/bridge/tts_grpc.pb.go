// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: tts.proto

package bridge

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Bridge_GetSpeechStream_FullMethodName     = "/bridge.Bridge/GetSpeechStream"
	Bridge_GetSpeech_FullMethodName           = "/bridge.Bridge/GetSpeech"
	Bridge_GetPartTextToSpeech_FullMethodName = "/bridge.Bridge/GetPartTextToSpeech"
	Bridge_DownloadBarkModel_FullMethodName   = "/bridge.Bridge/DownloadBarkModel"
)

// BridgeClient is the client API for Bridge service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BridgeClient interface {
	// Get full text to speech with speech streamed in parts.
	GetSpeechStream(ctx context.Context, in *Text, opts ...grpc.CallOption) (Bridge_GetSpeechStreamClient, error)
	// Get text to speech of the whole text in one go.
	GetSpeech(ctx context.Context, in *Text, opts ...grpc.CallOption) (*Speech, error)
	// Stream text with appropriate part number to get speech streamed back.
	GetPartTextToSpeech(ctx context.Context, opts ...grpc.CallOption) (Bridge_GetPartTextToSpeechClient, error)
	DownloadBarkModel(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type bridgeClient struct {
	cc grpc.ClientConnInterface
}

func NewBridgeClient(cc grpc.ClientConnInterface) BridgeClient {
	return &bridgeClient{cc}
}

func (c *bridgeClient) GetSpeechStream(ctx context.Context, in *Text, opts ...grpc.CallOption) (Bridge_GetSpeechStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Bridge_ServiceDesc.Streams[0], Bridge_GetSpeechStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &bridgeGetSpeechStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Bridge_GetSpeechStreamClient interface {
	Recv() (*Speech, error)
	grpc.ClientStream
}

type bridgeGetSpeechStreamClient struct {
	grpc.ClientStream
}

func (x *bridgeGetSpeechStreamClient) Recv() (*Speech, error) {
	m := new(Speech)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bridgeClient) GetSpeech(ctx context.Context, in *Text, opts ...grpc.CallOption) (*Speech, error) {
	out := new(Speech)
	err := c.cc.Invoke(ctx, Bridge_GetSpeech_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bridgeClient) GetPartTextToSpeech(ctx context.Context, opts ...grpc.CallOption) (Bridge_GetPartTextToSpeechClient, error) {
	stream, err := c.cc.NewStream(ctx, &Bridge_ServiceDesc.Streams[1], Bridge_GetPartTextToSpeech_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &bridgeGetPartTextToSpeechClient{stream}
	return x, nil
}

type Bridge_GetPartTextToSpeechClient interface {
	Send(*Text) error
	Recv() (*Speech, error)
	grpc.ClientStream
}

type bridgeGetPartTextToSpeechClient struct {
	grpc.ClientStream
}

func (x *bridgeGetPartTextToSpeechClient) Send(m *Text) error {
	return x.ClientStream.SendMsg(m)
}

func (x *bridgeGetPartTextToSpeechClient) Recv() (*Speech, error) {
	m := new(Speech)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bridgeClient) DownloadBarkModel(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Bridge_DownloadBarkModel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BridgeServer is the server API for Bridge service.
// All implementations must embed UnimplementedBridgeServer
// for forward compatibility
type BridgeServer interface {
	// Get full text to speech with speech streamed in parts.
	GetSpeechStream(*Text, Bridge_GetSpeechStreamServer) error
	// Get text to speech of the whole text in one go.
	GetSpeech(context.Context, *Text) (*Speech, error)
	// Stream text with appropriate part number to get speech streamed back.
	GetPartTextToSpeech(Bridge_GetPartTextToSpeechServer) error
	DownloadBarkModel(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedBridgeServer()
}

// UnimplementedBridgeServer must be embedded to have forward compatible implementations.
type UnimplementedBridgeServer struct {
}

func (UnimplementedBridgeServer) GetSpeechStream(*Text, Bridge_GetSpeechStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSpeechStream not implemented")
}
func (UnimplementedBridgeServer) GetSpeech(context.Context, *Text) (*Speech, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpeech not implemented")
}
func (UnimplementedBridgeServer) GetPartTextToSpeech(Bridge_GetPartTextToSpeechServer) error {
	return status.Errorf(codes.Unimplemented, "method GetPartTextToSpeech not implemented")
}
func (UnimplementedBridgeServer) DownloadBarkModel(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadBarkModel not implemented")
}
func (UnimplementedBridgeServer) mustEmbedUnimplementedBridgeServer() {}

// UnsafeBridgeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BridgeServer will
// result in compilation errors.
type UnsafeBridgeServer interface {
	mustEmbedUnimplementedBridgeServer()
}

func RegisterBridgeServer(s grpc.ServiceRegistrar, srv BridgeServer) {
	s.RegisterService(&Bridge_ServiceDesc, srv)
}

func _Bridge_GetSpeechStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Text)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BridgeServer).GetSpeechStream(m, &bridgeGetSpeechStreamServer{stream})
}

type Bridge_GetSpeechStreamServer interface {
	Send(*Speech) error
	grpc.ServerStream
}

type bridgeGetSpeechStreamServer struct {
	grpc.ServerStream
}

func (x *bridgeGetSpeechStreamServer) Send(m *Speech) error {
	return x.ServerStream.SendMsg(m)
}

func _Bridge_GetSpeech_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Text)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BridgeServer).GetSpeech(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bridge_GetSpeech_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BridgeServer).GetSpeech(ctx, req.(*Text))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bridge_GetPartTextToSpeech_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BridgeServer).GetPartTextToSpeech(&bridgeGetPartTextToSpeechServer{stream})
}

type Bridge_GetPartTextToSpeechServer interface {
	Send(*Speech) error
	Recv() (*Text, error)
	grpc.ServerStream
}

type bridgeGetPartTextToSpeechServer struct {
	grpc.ServerStream
}

func (x *bridgeGetPartTextToSpeechServer) Send(m *Speech) error {
	return x.ServerStream.SendMsg(m)
}

func (x *bridgeGetPartTextToSpeechServer) Recv() (*Text, error) {
	m := new(Text)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Bridge_DownloadBarkModel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BridgeServer).DownloadBarkModel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bridge_DownloadBarkModel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BridgeServer).DownloadBarkModel(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Bridge_ServiceDesc is the grpc.ServiceDesc for Bridge service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Bridge_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bridge.Bridge",
	HandlerType: (*BridgeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSpeech",
			Handler:    _Bridge_GetSpeech_Handler,
		},
		{
			MethodName: "DownloadBarkModel",
			Handler:    _Bridge_DownloadBarkModel_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSpeechStream",
			Handler:       _Bridge_GetSpeechStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetPartTextToSpeech",
			Handler:       _Bridge_GetPartTextToSpeech_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "tts.proto",
}
